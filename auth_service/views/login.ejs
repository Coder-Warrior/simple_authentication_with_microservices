<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login Page</title>
  <style>
    /* Basic reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #6e45e2, #88d3ce);
    }

    /* Container Styling */
    .container {
      background: #fff;
      width: 350px;
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 15px 25px rgba(0, 0, 0, 0.3);
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    /* Animation for Container */
    .container::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 400%;
      height: 400%;
      background: linear-gradient(45deg, #6e45e2, #88d3ce);
      z-index: 0;
      transition: 0.5s;
      border-radius: 50%;
      opacity: 0;
      animation: animateBg 4s linear infinite;
    }

    /* Form Styling */
    h2 {
      margin-bottom: 2rem;
      color: #333;
      font-weight: bold;
    }

    .inputBox {
      position: relative;
      margin-bottom: 1.5rem;
    }

    .inputBox input {
      width: 100%;
      padding: 10px;
      font-size: 1rem;
      background: #f5f5f5;
      border: 2px solid #ddd;
      border-radius: 5px;
      outline: none;
      transition: border-color 0.3s ease;
    }

    .inputBox input:focus {
      border-color: #6e45e2;
    }

    .inputBox label {
      position: absolute;
      left: 10px;
      top: 10px;
      font-size: 0.9rem;
      color: #888;
      transition: 0.3s;
    }

    .inputBox input:focus + label,
    .inputBox input:not(:placeholder-shown) + label {
      top: -18px;
      left: 8px;
      font-size: 0.75rem;
      color: #6e45e2;
    }

    .inputBox button {
      width: 100%;
      padding: 10px;
      font-size: 1rem;
      color: #fff;
      background: #6e45e2;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }

    .inputBox button:hover {
      background: #534bae;
    }

    /* Animation */
    @keyframes animateBg {
      0%, 100% {
        transform: translate(-50%, -50%) rotate(0deg);
        opacity: 0.2;
      }
      50% {
        transform: translate(-50%, -50%) rotate(360deg);
        opacity: 0.6;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Login</h2>
    <form id="loginForm">
      <div class="inputBox">
        <input type="email" id="email" placeholder=" " />
        <label>Email</label>
      </div>
      <div class="inputBox">
        <input type="password" id="password" placeholder=" " />
        <label>Password</label>
      </div>
      <div class="inputBox">
        <button type="submit">Submit</button>
      </div>
    </form>
  </div>

  <script>
    document.getElementById("loginForm").addEventListener("submit", function(event) {
      event.preventDefault();

      const email = document.getElementById("email").value;
      const password = document.getElementById("password").value;

      fetch("/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ email, password })
      })
      .then(response => response.json())
      .then(data => {

        if (data.userId) {

          async function discoverService(serviceName) {
            try {
                const discoveryResponse = await fetch(`http://localhost:3003/getServiceUrl/${serviceName}`);
                const discoveryResponseData = await discoveryResponse.json();
                if (discoveryResponseData.serviceUrl) {
                    return discoveryResponseData.serviceUrl;
                } else {
                    console.log(data);
                }
            } catch (e) {
                console.log(e);
            }
        }

          discoverService('main_page_service')
              .then(serviceUrl => {
                window.location.assign(serviceUrl);
            })
              .catch(error => {
                  console.error('Service discovery failed:', error);
              });
        } else {
          for (let i = 0; i < Object.values(data.errors).length; i++) {
                    if (Object.values(data.errors)[i]) {
                        alert(Object.values(data.errors)[i]);
                    }
          }
        }
      })
      .catch(error => {
        console.error("Error:", error);
      });
    });
  </script>
</body>
</html>
